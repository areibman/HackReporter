# Video Processing Tasks
video_analysis_task:
  description: >
    Analyze the video file {video_path} using Gemini's video understanding API to create a short summary of the project demo:
    1. Enable audio transcription to capture all spoken content with timestamps
    2. Identify the project name and what it does
    3. Capture the most impressive or innovative aspects with specific timestamps
    4. Note any technical challenges overcome
    5. Extract quotes or soundbites with exact timestamps
    6. Identify key demo moments (consider using higher FPS for demo sections)
    7. Note visual elements like UI/UX, hardware, or live demonstrations
    
    Create summaries following this EXACT format for EACH project:
    
    <example>
    Project Name
    
    One-line description of what it does.
    
    Catchy tagline or category
    @twitter_handle
    </example>
    
    Here are properly formatted examples:
    
    <example>
    Bansky AI

    Computer use agent that draws art on an HTML canvas. 

    Self-taught AI artist
    @Jandodev
    </example>
    
    <example>
    Touch Grass

    Computer use agent that looks at the current time and location to recommend nature spots.
    
    AI wellness companion
    @touchgrassdev
    </example>
    
    <example>
    Real Estate Agent

    Agent powered by OpenAI web search to find apartments for rent on the web.

    AI agents to replace human agents
    @vacheishvilin
    </example>
    
    <example>
    Memory Agent

    Connecting the Agents SDK with the AI Compass wearable to analyze memories, patterns, and struggles from daily life.

    AI second brain
    @hackwithzach @fieldyai
    </example>

  expected_output: >
    A structured summary EXACTLY in this format (no numbers, no extra text):
    
    [Project Name]
    
    [One-line description of what the project does, ending with a period.]
    
    [Catchy tagline or category phrase]
    [@twitter_handle]
    
    Example output:
    Jaiku
    
    Natural language to JQ query DSL agent transforming how users interact with JSON data.
    
    AI data whisperer
    @jaikudev
  agent: video_summarizer

caption_generation_task:
  description: >
    Generate accurate captions for the video {video_path}:
    1. Create time-coded subtitles for all spoken content
    2. Ensure technical terms are spelled correctly
    3. Include speaker identification where possible
    4. Add descriptive captions for important visual elements
    5. Proofread for grammar and spelling errors
  expected_output: >
    A caption file (SRT format) with:
    - Properly timed subtitles
    - Speaker labels
    - Correct technical terminology
    - Description of key visual moments
  agent: video_captioner

audio_enhancement_task:
  description: >
    Process the audio track of video {video_path}:
    1. Identify and reduce background noise
    2. Enhance speech clarity
    3. Normalize audio levels
    4. Remove echo or reverb where possible
    5. Preserve important ambient sounds
  expected_output: >
    An audio processing report containing:
    - Noise reduction settings applied
    - Audio quality improvements made
    - Any sections that couldn't be enhanced
    - Recommendations for the final video
  agent: video_noise_remover

video_ranking_task:
  description: >
    Given a full list of video summary posts, rank the processed video based on:
    Analyze and rank the processed video based on:
    1. Innovation and uniqueness of the project
    2. Quality of the presentation
    3. Technical impressiveness
    4. Potential for social media engagement
    5. Story-telling and narrative quality
    Compare with other videos in {video_directory} if available.
  expected_output: >
    A ranking report with:
    - Ordinal ranking of the video
    - Viral potential assessment
    - Key strengths and weaknesses
  agent: video_ranker
  context:
    - video_analysis_task

person_research_task:
  description: >
    Research the project participants from the video:
    1. Use the attendee list {attendee_list} as reference
    2. Search for their Twitter/X profiles
    3. Find their LinkedIn or other professional profiles
    4. Verify their association with the project
    5. Collect relevant handles and profile links
    
    Ensure all information is publicly available and accurate.
  expected_output: >
    A participant report containing:
    - Names of team members
    - Twitter/X handles (verified)
    - Other relevant social media links
    - Brief bio or role in the project
    - Suggested tags for the tweet
  agent: person_finder
  context:
    - video_analysis_task

final_tweet_composition_task:
  description: >
    Compose the final tweet thread using all gathered information:
    1. Create a complete X/Twitter thread:
       
       FIRST: Start with a compelling 3-part introduction (NO NUMBERING):
       ```
       [Event description line 1]
       
       [Event description line 2]
       
       [Thread introduction with (ðŸ§µ):]
       
       
       
       
       ```
       
       THEN: Add numbered tweets for each project:
       ```
       1/ [Project Name from video analysis]
       
       [Description from video analysis]
       
       [Tagline from video analysis]
       [Twitter handles from person research]
       
       
       
       
       2/ [Next Project Name]
       
       [Description]
       
       [Tagline]
       [Handles]
        ```
        
        - Use the EXACT project summaries from video_analysis_task (don't rewrite them!)
        - Just add the tweet number (1/, 2/, etc.) before each project name
        - If person_research_task found better Twitter handles, use those
        - DO NOT combine multiple numbered tweets together
     
     CRITICAL FORMATTING REQUIREMENTS:
    - Each tweet MUST be separated by EXACTLY 4 blank lines (press Enter 4 times)
    - This is MANDATORY for Typefully to properly split the thread
    - DO NOT PUT MULTIPLE NUMBERED TWEETS IN THE SAME SECTION
    - Each tweet number (1/, 2/, 3/, etc.) MUST start its own section
    
    CORRECT FORMAT (notice the 4 empty lines between tweets):
    ```
    1/ Project Name
    
    Description of what it does.
    
    Tagline
    @handle
    
    
    
    
    2/ Another Project
    
    Description here.
    
    Category
    @creator
    ```
    
    WRONG FORMAT (DO NOT DO THIS):
    ```
    1/ First project
    2/ Second project  <- WRONG! These need 4 blank lines between them
    3/ Third project   <- WRONG! Each number needs its own section
    ```
    
    2. Use the Typefully API tool (typefully_api) to create a draft of the complete thread:
       - Pass the entire thread content to the tool
       - Set threadify=true to handle thread splitting
       - Set share=true to get a shareable link
    3. Save the thread content to the output file AND create the Typefully draft
    
    The thread should be engaging, informative, and ready to post with proper formatting.
  expected_output: >
    A complete tweet thread that includes:
    - The full thread content saved to file with proper formatting (4 newlines between tweets)
    - Each tweet on a separate line with its number (1/, 2/, etc.)
    - Confirmation that the draft was created in Typefully
    - The Typefully draft ID and shareable link (if available)
    - Status message confirming successful creation
  agent: video_summarizer
  context:
    - video_analysis_task
    - person_research_task
    - video_ranking_task 