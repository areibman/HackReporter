# Individual Video Processing Tasks (kickoff_for_each)
video_analysis_task:
  description: >
    Analyze a SINGLE video file using Gemini's video understanding API to create a short summary of the project demo.
    
    You have been provided with:
    - video_path: The path to a single video file to process
    - video_filename: The name of the video file
    - attendee_list: List of attendees (if available)
    
    CRITICAL: The video file is located at: {video_path}
    This is the EXACT path you must pass to the Gemini Video Tool.
    
    For this video:
    1. Use the Gemini Video Tool to analyze the video at {video_path}
       - Pass the EXACT path: {video_path}
       - Enable transcribe=True for audio transcription
    2. If the tool returns an error, try again with just the path
    3. Identify the project name and what it does
    4. Capture the most impressive or innovative aspects
    5. Note any technical challenges overcome
    6. Extract quotes or soundbites
    7. Identify key demo moments
    8. Note visual elements like UI/UX, hardware, or live demonstrations
    
    Create a summary following this EXACT format:
    
    Project Name
    
    One-line description of what it does.
    
    Catchy tagline or category
    @twitter_handle

  expected_output: >
    A single project summary in the EXACT format specified:
    
    [Project Name]
    
    [One-line description of what the project does, ending with a period.]
    
    [Catchy tagline or category phrase]
    [@twitter_handle or @unknown if not found]
    
    IMPORTANT: Always produce this format even if some information is missing.
    Use placeholders like "Unknown Project" or "@unknown" if needed.
    Twitter handles may not always be available - that's OK! Use @unknown in those cases.
    Do NOT include error messages or explanations in the output.
  agent: video_summarizer

person_research_task:
  description: >
    Research the project participants from the analyzed video:
    
    Based on the project identified in the video_analysis_task:
    1. Use the attendee list {attendee_list} as reference if available
    2. Search for their Twitter/X profiles
    3. Find their LinkedIn or other professional profiles if possible
    4. Verify their association with the project
    5. Collect relevant handles and profile links
    
    IMPORTANT: If Twitter handles cannot be found, that's perfectly acceptable!
    The search tool may not always find profiles, especially for:
    - People with common names
    - People without Twitter accounts
    - People with private profiles
    
    In these cases, simply note that handles were not found and move on.
    
    Ensure all information is publicly available and accurate.
  expected_output: >
    A participant report for this project containing:
    - Project name
    - Names of team members (if identified)
    - Twitter/X handles (if found - it's OK if none are found!)
    - Other relevant social media links (if found)
    - Brief bio or role in the project (if available)
    
    If no profiles are found, simply state:
    "No social media profiles found for this project's team members"
  agent: person_finder
  context:
    - video_analysis_task

create_tweet_summary_task:
  description: >
    Create a final tweet-ready summary for this individual project.
    
    Combine the information from:
    1. The video analysis with project details
    2. The person research with verified Twitter handles (if any were found)
    
    CRITICAL: If no Twitter handles were found in person_research_task, that's OK!
    Simply use the original format from video_analysis_task.
    
    Format the output as a single tweet-ready summary that includes:
    - Project name
    - Description
    - Tagline
    - Twitter handles if found, otherwise use @unknown or omit handles entirely
    
    Keep the same format as the video analysis but update Twitter handles only if better ones were found.
  expected_output: >
    A single tweet-ready project summary in this format:
    
    [Project Name]
    
    [One-line description]
    
    [Tagline]
    [@verified_handles or @unknown if none found]
    
    Note: It's perfectly acceptable to use @unknown or omit handles if none were found!
  agent: video_summarizer
  context:
    - video_analysis_task
    - person_research_task

# Aggregation Tasks (single kickoff)
aggregate_summaries_task:
  description: >
    Collect and organize all individual video summaries that were processed.
    
    CRITICAL: You are receiving ACTUAL summaries from real video processing.
    DO NOT create fake projects or example data.
    
    The summaries to process are:
    {all_summaries}
    
    Total number of videos processed: {video_count}
    
    Your task is to:
    1. Parse through the summaries provided above
    2. Count exactly how many projects were included (should be {video_count})
    3. Extract each project's details:
       - Project Name (first line of each summary)
       - One-line description (second line)
       - Tagline (third line)
       - Twitter handles (fourth line)
    4. Present them in a clear, numbered list
    5. DO NOT add any fake or example projects - use ONLY what's provided above
    
    Format each summary clearly:
    Project #1:
    - Name: [actual name from summary]
    - Description: [actual description]
    - Tagline: [actual tagline]
    - Twitter: [actual handle]
  expected_output: >
    A consolidated list of the ACTUAL project summaries from video processing.
    Must include EXACTLY {video_count} project(s).
    Each project should be clearly numbered and formatted.
    NO fake or example projects - only use the real data provided above.
  agent: thread_composer

video_ranking_task:
  description: >
    Analyze and rank the processed video summaries based on engagement potential.
    
    CRITICAL: Use ONLY the actual projects from the aggregate_summaries_task output.
    DO NOT create fake projects. If only one project was processed, rank only that one project.
    
    The aggregate_summaries_task has provided you with the actual project details.
    
    Ranking criteria:
    1. Innovation and uniqueness of the project
    2. Quality of the presentation (based on the summaries)
    3. Technical impressiveness
    4. Potential for social media engagement
    5. Story-telling and narrative quality
    
    Rank the actual projects (not fictional ones) from most to least engaging for social media.
  expected_output: >
    A ranking report that includes:
    - ONLY the actual projects from aggregate_summaries_task (no fake projects)
    - If only 1 project exists, provide analysis for just that 1 project
    - Viral potential assessment for each real project
    - Key strengths that make projects stand out
    - Clear ordering recommendation for the tweet thread
  agent: video_ranker
  context:
    - aggregate_summaries_task

final_tweet_composition_task:
  description: >
    Compose the final tweet thread using all gathered information:
    
    CRITICAL REQUIREMENTS:
    1. You MUST use ONLY the actual project summaries from the previous aggregate_summaries_task
    2. DO NOT create fake or example projects
    3. DO NOT hallucinate project names like "SaveThePlanet" or "CodeConnect"  
    4. Use EXACTLY the projects from the aggregated summaries (provided by aggregate_summaries_task)
    5. Follow the ranking order from video_ranking_task
    
    The previous tasks have provided:
    - Aggregated summaries with all project details (from aggregate_summaries_task)
    - Ranking order for the projects (from video_ranking_task)
    
    If only ONE project was processed, create a thread with:
    - The intro section (3 parts)
    - ONE project tweet for that single project
    
    Thread format:
       FIRST: Start with a compelling 3-part introduction (NO NUMBERING):
       ```
       Join us as we unveil the groundbreaking projects from our latest hackathon! ðŸš€
       
       Innovation meets practical solutions in these exciting demonstrations.
       
       Discover the tools and ideas shaping tomorrow (ðŸ§µ):
       
       
       
       
       ```
       
       THEN: Add numbered tweets for EACH project from the aggregated summaries:
       ```
       1/ [Project Name from aggregated summaries]
       
       [Description from aggregated summaries]
       
       [Tagline from aggregated summaries]
       [Twitter handles from aggregated summaries]
       
       
       
       
       2/ [Next project if exists]
       ...
       ```
       
    - Use the exact project details from aggregate_summaries_task
    - Order projects based on the video_ranking_task recommendations
    - Each tweet MUST be separated by EXACTLY 4 blank lines
    - Include ONLY the projects that were actually processed
    - If Twitter handles show as @unknown, you may omit them or keep as @unknown
    
    2. Use the Typefully API tool (typefully_api) to create a draft:
       - Pass the entire thread content to the tool
       - Set threadify=true to handle thread splitting
       - Set share=true to get a shareable link
    
    3. Save the thread content to the output file
  expected_output: >
    A complete tweet thread that includes:
    - ONLY the actual projects from the context (no fake projects)
    - The exact number of projects that were processed
    - Projects ordered based on the ranking recommendations
    - Proper formatting with 4 newlines between tweets
    - Confirmation that the draft was created in Typefully
    - The shareable link from Typefully
  agent: thread_composer
  context:
    - aggregate_summaries_task
    - video_ranking_task 