# Video Processing Tasks
video_analysis_task:
  description: >
    Analyze the video file {video_path} using Gemini's video understanding API to create a short summary of the project demo:
    1. Enable audio transcription to capture all spoken content with timestamps
    2. Identify the project name and what it does
    3. Capture the most impressive or innovative aspects with specific timestamps
    4. Note any technical challenges overcome
    5. Extract quotes or soundbites with exact timestamps
    6. Identify key demo moments (consider using higher FPS for demo sections)
    7. Note visual elements like UI/UX, hardware, or live demonstrations
    
    Example posts:
    <post>
    1/ Bansky AI

    Computer use agent that draws art on an HTML canvas. 

    Self-taught AI artist
    @Jandodev
    </post>


    <post>
    2/ Touch Grass

    Computer use agent that looks at the current time and location to recommend nature spots

    3/ Real Estate Agent

    Agent powered by OpenAI web search to find apartments for rent on the web

    AI agents to replace human agents
    @vacheishvilin
    </post>

    <post>
    4/ Memory Agent

    Connecting the Agents SDK with the AI Compass wearable to analyze memories, patterns, and struggles from daily life

    AI second brain
    @hackwithzach @fieldyai
    </post>

    <post>
    5/ Agent Polling Simulator

    Swarm of AI agents that lets you simulate different political personas and query how they respond to different policy choices and news articles

    AI Sims for research
    @SirvenJose
    </post>

    <post>
    6/ Salary Seeker

    Create specialized queries to scrape Glassdoor via RapidAPI using AI agents

    (I rotated the keys donâ€™t worry)
    @AlexReibman
    </post>

    <post>
    7/ Multi-Agent Brainstormer

    Connecting brainstorming agents with evaluator agents to come up with cohesive strategies to achieve any goal
    @dazzagreenwood
    </post>

  expected_output: >
    A structured summary:
    - Project name
    - One or two line description (or a pithy one-liner)
    - One or two line explanation of the demo 
    - Keep the total text length short (250 characters max)
    - Technical specs mentioned in the demo
  agent: video_summarizer

caption_generation_task:
  description: >
    Generate accurate captions for the video {video_path}:
    1. Create time-coded subtitles for all spoken content
    2. Ensure technical terms are spelled correctly
    3. Include speaker identification where possible
    4. Add descriptive captions for important visual elements
    5. Proofread for grammar and spelling errors
  expected_output: >
    A caption file (SRT format) with:
    - Properly timed subtitles
    - Speaker labels
    - Correct technical terminology
    - Description of key visual moments
  agent: video_captioner

audio_enhancement_task:
  description: >
    Process the audio track of video {video_path}:
    1. Identify and reduce background noise
    2. Enhance speech clarity
    3. Normalize audio levels
    4. Remove echo or reverb where possible
    5. Preserve important ambient sounds
  expected_output: >
    An audio processing report containing:
    - Noise reduction settings applied
    - Audio quality improvements made
    - Any sections that couldn't be enhanced
    - Recommendations for the final video
  agent: video_noise_remover

video_ranking_task:
  description: >
    Given a full list of video summary posts, rank the processed video based on:
    Analyze and rank the processed video based on:
    1. Innovation and uniqueness of the project
    2. Quality of the presentation
    3. Technical impressiveness
    4. Potential for social media engagement
    5. Story-telling and narrative quality
    Compare with other videos in {video_directory} if available.
  expected_output: >
    A ranking report with:
    - Ordinal ranking of the video
    - Viral potential assessment
    - Key strengths and weaknesses
  agent: video_ranker
  context:
    - video_analysis_task

person_research_task:
  description: >
    Research the project participants from the video:
    1. Use the attendee list {attendee_list} as reference
    2. Search for their Twitter/X profiles
    3. Find their LinkedIn or other professional profiles
    4. Verify their association with the project
    5. Collect relevant handles and profile links
    
    Ensure all information is publicly available and accurate.
  expected_output: >
    A participant report containing:
    - Names of team members
    - Twitter/X handles (verified)
    - Other relevant social media links
    - Brief bio or role in the project
    - Suggested tags for the tweet
  agent: person_finder
  context:
    - video_analysis_task

final_tweet_composition_task:
  description: >
    Compose the final tweet thread using all gathered information:
    1. Create a complete X/Twitter thread with:
       - A compelling 3-section title (250 characters max) following this format:
         <title>
         3,000+ top builders came to San Francisco for the Al Engineer World's Fair.

         We invited the best to an exclusive 8pm - 1am hack night to see what they're capable of.

         Here are the demos from the @aiDotEngineer Afterparty Hack Night with @AgentOpsAl (ðŸ§µ):
         </title>
       - Individual tweets for each project demo from the video analysis
       - Proper Twitter handles from the person research
       - Thread numbering (1/, 2/, etc.)
    
    CRITICAL FORMATTING REQUIREMENTS:
    - Each tweet MUST be separated by EXACTLY 4 blank lines (press Enter 4 times)
    - This is required for Typefully to properly split the thread
    - Example format:
      1/ First tweet content here


      2/ Second tweet content here


      3/ Third tweet content here
    
    2. Use the Typefully API tool (typefully_api) to create a draft of the complete thread:
       - Pass the entire thread content to the tool
       - Set threadify=true to handle thread splitting
       - Set share=true to get a shareable link
    3. Save the thread content to the output file AND create the Typefully draft
    
    The thread should be engaging, informative, and ready to post with proper formatting.
  expected_output: >
    A complete tweet thread that includes:
    - The full thread content saved to file with proper formatting (4 newlines between tweets)
    - Each tweet on a separate line with its number (1/, 2/, etc.)
    - Confirmation that the draft was created in Typefully
    - The Typefully draft ID and shareable link (if available)
    - Status message confirming successful creation
  agent: video_summarizer
  context:
    - video_analysis_task
    - person_research_task
    - video_ranking_task 