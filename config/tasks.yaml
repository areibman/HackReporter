# Individual Video Processing Tasks (kickoff_for_each)
video_analysis_task:
  description: >
    Analyze a SINGLE video file using Gemini's video understanding API to create a short summary of the project demo.
    
    You have been provided with:
    - video_path: The path to a single video file to process
    - video_filename: The name of the video file
    - attendee_list: List of attendees (if available)
    
    For this video:
    1. Use the Gemini Video Tool to analyze the video at {video_path}
    2. Enable audio transcription to capture all spoken content with timestamps
    3. Identify the project name and what it does
    4. Capture the most impressive or innovative aspects with specific timestamps
    5. Note any technical challenges overcome
    6. Extract quotes or soundbites with exact timestamps
    7. Identify key demo moments (consider using higher FPS for demo sections)
    8. Note visual elements like UI/UX, hardware, or live demonstrations
    
    Create a summary following this EXACT format:
    
    Project Name
    
    One-line description of what it does.
    
    Catchy tagline or category
    @twitter_handle

  expected_output: >
    A single project summary in the EXACT format specified:
    
    [Project Name]
    
    [One-line description of what the project does, ending with a period.]
    
    [Catchy tagline or category phrase]
    [@twitter_handle]
    
    Do NOT include any additional text or formatting.
  agent: video_summarizer

person_research_task:
  description: >
    Research the project participants from the analyzed video:
    
    Based on the project identified in the video_analysis_task:
    1. Use the attendee list {attendee_list} as reference if available
    2. Search for their Twitter/X profiles
    3. Find their LinkedIn or other professional profiles
    4. Verify their association with the project
    5. Collect relevant handles and profile links
    
    Ensure all information is publicly available and accurate.
  expected_output: >
    A participant report for this project containing:
    - Project name
    - Names of team members
    - Twitter/X handles (verified)
    - Other relevant social media links
    - Brief bio or role in the project
  agent: person_finder
  context:
    - video_analysis_task

create_tweet_summary_task:
  description: >
    Create a final tweet-ready summary for this individual project.
    
    Combine the information from:
    1. The video analysis with project details
    2. The person research with verified Twitter handles
    
    Format the output as a single tweet-ready summary that includes:
    - Project name
    - Description
    - Tagline
    - Verified Twitter handles from person research (if found)
    
    Keep the same format as the video analysis but update Twitter handles if better ones were found.
  expected_output: >
    A single tweet-ready project summary in this format:
    
    [Project Name]
    
    [One-line description]
    
    [Tagline]
    [@verified_handles]
  agent: video_summarizer
  context:
    - video_analysis_task
    - person_research_task

# Aggregation Tasks (single kickoff)
aggregate_summaries_task:
  description: >
    Collect and organize all individual video summaries that were processed.
    
    You have access to:
    - all_summaries: A collection of all individual project summaries
    - video_count: The total number of videos processed
    - summaries_file: Path to the JSON file containing all summaries
    
    Your task is to:
    1. Parse through all the individual summaries
    2. Ensure each summary is properly formatted
    3. Create a consolidated list of all projects
    4. Prepare the data for ranking and final thread composition
    
    Each summary should follow the format:
    - Project Name
    - One-line description
    - Tagline
    - Twitter handles
  expected_output: >
    A consolidated, well-organized list of ALL project summaries from the individual video processing.
    Each project should be clearly separated and maintain the standard format.
    Include a count of total projects processed.
  agent: thread_composer

video_ranking_task:
  description: >
    Analyze and rank ALL the processed video summaries based on:
    1. Innovation and uniqueness of the project
    2. Quality of the presentation (based on the summaries)
    3. Technical impressiveness
    4. Potential for social media engagement
    5. Story-telling and narrative quality
    
    You have access to all project summaries from the aggregate_summaries_task.
    Rank ALL projects from most to least engaging for social media.
  expected_output: >
    A comprehensive ranking report with:
    - Ordered list of ALL projects from most to least engaging
    - Viral potential assessment for each project
    - Key strengths that make top projects stand out
    - Recommendations for tweet thread ordering
  agent: video_ranker
  context:
    - aggregate_summaries_task

final_tweet_composition_task:
  description: >
    Compose the final tweet thread using all gathered information:
    
    CRITICAL: Use the aggregated summaries and rankings to create the final thread.
    Include ALL projects that were processed.
    
    1. Create a complete X/Twitter thread:
       
       FIRST: Start with a compelling 3-part introduction (NO NUMBERING):
       ```
       [Event description line 1]
       
       [Event description line 2]
       
       [Thread introduction with (ðŸ§µ):]
       
       
       
       
       ```
       
       THEN: Add numbered tweets for EACH project based on the ranking:
       ```
       1/ [Top-ranked Project Name]
       
       [Description]
       
       [Tagline]
       [Twitter handles]
       
       
       
       
       2/ [Second-ranked Project Name]
       
       [Description]
       
       [Tagline]
       [Handles]
       ```
       
    - Use the project summaries from aggregate_summaries_task
    - Order projects based on the video_ranking_task recommendations
    - Include ALL projects that were processed
    - Each tweet MUST be separated by EXACTLY 4 blank lines
    
    2. Use the Typefully API tool (typefully_api) to create a draft:
       - Pass the entire thread content to the tool
       - Set threadify=true to handle thread splitting
       - Set share=true to get a shareable link
    
    3. Save the thread content to the output file
  expected_output: >
    A complete tweet thread that includes:
    - ALL projects from the aggregated summaries
    - Projects ordered based on the ranking recommendations
    - Proper formatting with 4 newlines between tweets
    - Confirmation that the draft was created in Typefully
    - The shareable link from Typefully
  agent: thread_composer
  context:
    - aggregate_summaries_task
    - video_ranking_task 